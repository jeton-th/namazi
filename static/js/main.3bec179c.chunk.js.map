{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","useState","Date","date","setDate","coords","setCoords","times","setTimes","place","setPlace","dateInput","setDateInput","placeInput","setPlaceInput","useEffect","navigator","geolocation","getCurrentPosition","position","latitude","toFixed","longitude","nextDay","getDate","selectedDateTimes","SunCalc","getTimes","nextDayTimes","nauticalDawn","sunrise","solarNoon","sunset","nauticalDusk","halfNight","midnight","getTime","className","type","onClick","prev","icon","faCalendarAlt","toDateString","disabled","faMapMarkerAlt","value","toISOString","slice","onChange","e","target","placeholder","onKeyDown","key","length","process","LOCATION_IQ_KEY","fetch","then","res","json","error","lon","lat","parseFloat","map","label","time","String","getHours","padStart","getMinutes","getTimeDiv","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA0IeA,EA9HH,WACV,MAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BH,qBAA5B,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAA0BL,mBAAS,IAAnC,mBAAOM,EAAP,KAAcC,EAAd,KACA,EAA0BP,mBAAS,IAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KACA,EAAkCT,oBAAS,GAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KACA,EAAoCX,oBAAS,GAA7C,mBAAOY,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACHC,UAAUC,aACfD,UAAUC,YAAYC,oBAAmB,SAACC,GACxCb,EAAU,CACRc,SAAUD,EAASd,OAAOe,SAASC,QAAQ,GAC3CC,UAAWH,EAASd,OAAOiB,UAAUD,QAAQ,UAGhD,IAEHN,qBAAU,WACR,GAAKZ,GAASE,EAAd,CACA,IAAMkB,EAAU,IAAIrB,KAAKC,GACzBoB,EAAQnB,QAAQmB,EAAQC,UAAY,GACpC,IAAQJ,EAAwBf,EAAxBe,SAAUE,EAAcjB,EAAdiB,UACZG,EAAoBC,IAAQC,SAASxB,EAAMiB,EAAUE,GACrDM,EAAeF,IAAQC,SAASJ,EAASH,EAAUE,GAEvDO,EAKEJ,EALFI,aACAC,EAIEL,EAJFK,QACAC,EAGEN,EAHFM,UACAC,EAEEP,EAFFO,OACAC,EACER,EADFQ,aAKIC,GADcN,EAAaC,aACAG,GAAU,EACrCG,EAAW,IAAIjC,KAAK8B,EAAOI,UAAYF,GAE7C1B,EAAS,CACP,CAAC,OAAQqB,GACT,CAAC,UAAWC,GACZ,CAAC,QAASC,GAEV,CAAC,UAAWC,GACZ,CAAC,OAAQC,GACT,CAAC,WAAYE,QAEd,CAAChC,EAAME,IA2BV,OACE,sBAAKgC,UAAU,UAAf,UACE,mCACE,wBACEC,KAAK,SACLC,QAAS,kBAAM3B,GAAa,SAAC4B,GAE3B,OADKA,GAAM1B,GAAc,IACjB0B,MAJZ,SAOE,cAAC,IAAD,CAAiBC,KAAMC,QAGzB,6BAAKvC,EAAKwC,iBAEV,wBACEC,UAAQ,EACRN,KAAK,SACLC,QAAS,kBAAMzB,GAAc,SAAC0B,GAE5B,OADKA,GAAM5B,GAAa,IAChB4B,MALZ,SAQE,cAAC,IAAD,CAAiBC,KAAMI,WAI1BlC,GACC,uBACE2B,KAAK,OACLQ,MAAO3C,EAAK4C,cAAcC,MAAM,EAAG,IACnCC,SAAU,SAACC,GAAD,OAAO9C,EAAQ,IAAIF,KAAKgD,EAAEC,OAAOL,WAI9CjC,GACC,uBACEyB,KAAK,SACLQ,MAAOrC,EACP2C,YAAY,iBACZH,SAAU,SAACC,GAAD,OAAOxC,EAASwC,EAAEC,OAAOL,QACnCO,UAlEe,SAACH,GACtB,GAAc,WAAVA,EAAEI,IACJ5C,EAAS,IACTI,GAAc,QACT,GAAc,UAAVoC,EAAEI,IAAiB,CAC5B,GAAI7C,EAAM8C,OAAS,EAAG,OAEtB,IAAMD,EAEFE,0MAAYC,gBAEhBC,MAAM,gDAAD,OAAiDJ,EAAjD,cAA0D7C,EAA1D,iBACFkD,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACL,IAAKA,EAAIE,OAASF,EAAIL,OAAS,EAAG,CAChC,MAAqBK,EAAI,GAAjBG,EAAR,EAAQA,IAAKC,EAAb,EAAaA,IACb1D,EAAU,CACRc,SAAU6C,WAAWD,GAAK3C,QAAQ,GAClCC,UAAW2C,WAAWF,GAAK1C,QAAQ,aAoD3C,qBAAKgB,UAAU,QAAf,SACG9B,EAAM2D,KAAI,0CA/HA,SAACC,EAAOC,GAAR,OACjB,sBAAiB/B,UAAU,OAA3B,UACE,+BAAO8B,IACP,yCAAUE,OAAOD,EAAKE,YAAYC,SAAS,EAAG,GAA9C,YAAoDF,OAAOD,EAAKI,cAAcD,SAAS,EAAG,QAFlFJ,GA8H0BM,CAAnB,oB,MC/HnBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3bec179c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt, faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport SunCalc from 'suncalc';\n\nconst getTimeDiv = (label, time) => (\n  <div key={label} className=\"time\">\n    <span>{label}</span>\n    <span>{`${String(time.getHours()).padStart(2, 0)}:${String(time.getMinutes()).padStart(2, 0)}`}</span>\n  </div>\n);\n\nconst App = () => {\n  const [date, setDate] = useState(new Date());\n  const [coords, setCoords] = useState();\n  const [times, setTimes] = useState([]);\n  const [place, setPlace] = useState('');\n  const [dateInput, setDateInput] = useState(false);\n  const [placeInput, setPlaceInput] = useState(false);\n\n  useEffect(() => {\n    if (!navigator.geolocation) return;\n    navigator.geolocation.getCurrentPosition((position) => {\n      setCoords({\n        latitude: position.coords.latitude.toFixed(1),\n        longitude: position.coords.longitude.toFixed(1),\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!date || !coords) return;\n    const nextDay = new Date(date);\n    nextDay.setDate(nextDay.getDate() + 1);\n    const { latitude, longitude } = coords;\n    const selectedDateTimes = SunCalc.getTimes(date, latitude, longitude);\n    const nextDayTimes = SunCalc.getTimes(nextDay, latitude, longitude);\n    const {\n      nauticalDawn,\n      sunrise,\n      solarNoon,\n      sunset,\n      nauticalDusk,\n    } = selectedDateTimes;\n    // const halfAfterNoon = (sunset - solarNoon) / 2;\n    // const asr = new Date(solarNoon.getTime() + halfAfterNoon);\n    const nextDayDawn = nextDayTimes.nauticalDawn;\n    const halfNight = (nextDayDawn - sunset) / 2;\n    const midnight = new Date(sunset.getTime() + halfNight);\n\n    setTimes([\n      ['Fajr', nauticalDawn],\n      ['Sunrise', sunrise],\n      ['Dhuhr', solarNoon],\n      // ['Asr', asr],\n      ['Maghrib', sunset],\n      ['Isha', nauticalDusk],\n      ['Midnight', midnight],\n    ]);\n  }, [date, coords]);\n\n  const searchLocation = (e) => {\n    if (e.key === 'Escape') {\n      setPlace('');\n      setPlaceInput(false);\n    } else if (e.key === 'Enter') {\n      if (place.length < 3) return;\n\n      const key = process.env.NODE_ENV === 'development'\n        ? process.env.REACT_APP_LOCATION_IQ_KEY\n        : process.env.LOCATION_IQ_KEY;\n\n      fetch(`https://eu1.locationiq.com/v1/search.php?key=${key}&q=${place}&format=json`)\n        .then((res) => res.json())\n        .then((res) => {\n          if (!res.error && res.length > 0) {\n            const { lon, lat } = res[0];\n            setCoords({\n              latitude: parseFloat(lat).toFixed(1),\n              longitude: parseFloat(lon).toFixed(1),\n            });\n          }\n        });\n    }\n  };\n\n  return (\n    <div className=\"content\">\n      <header>\n        <button\n          type=\"button\"\n          onClick={() => setDateInput((prev) => {\n            if (!prev) setPlaceInput(false);\n            return !prev;\n          })}\n        >\n          <FontAwesomeIcon icon={faCalendarAlt} />\n        </button>\n\n        <h1>{date.toDateString()}</h1>\n\n        <button\n          disabled\n          type=\"button\"\n          onClick={() => setPlaceInput((prev) => {\n            if (!prev) setDateInput(false);\n            return !prev;\n          })}\n        >\n          <FontAwesomeIcon icon={faMapMarkerAlt} />\n        </button>\n      </header>\n\n      {dateInput && (\n        <input\n          type=\"date\"\n          value={date.toISOString().slice(0, 10)}\n          onChange={(e) => setDate(new Date(e.target.value))}\n        />\n      )}\n\n      {placeInput && (\n        <input\n          type=\"search\"\n          value={place}\n          placeholder=\"Set your place\"\n          onChange={(e) => setPlace(e.target.value)}\n          onKeyDown={searchLocation}\n        />\n      )}\n\n      <div className=\"times\">\n        {times.map(([label, time]) => getTimeDiv(label, time))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}